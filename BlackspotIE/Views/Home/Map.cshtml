@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<section class="u-align-center u-clearfix u-image u-section-1" id="sec-9040" data-image-width="6599" data-image-height="4399">
    <div class="u-clearfix u-sheet u-sheet-1">
        <h2 class="u-text u-text-default u-text-1">
            What is the postcode<br>where you currently live?
        </h2>
        <div class="u-form u-form-1">
            <form action="#" method="POST" class="u-clearfix u-form-horizontal u-form-spacing-10 u-inner-form" style="padding: 10px" source="custom" name="form">
                <div class="u-form-group u-form-group-1">
                    <label for="number-ef64" class="u-form-control-hidden u-label">number</label>
                    <input type="number" placeholder="postcode" id="number" name="number" class="u-border-4 u-border-white u-input u-input-rectangle u-radius-50 u-white" required="" />
                </div>
                <div id="select" class="u-form-group u-form-select u-form-group-2 u-form-control-hidden">
                    <div class="u-form-select-wrapper">
                        <select id="locs" name="suburb" class="u-border-4 u-border-white u-input u-input-rectangle u-radius-50 u-white">
                        </select>
                        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="12" version="1" class="u-caret"><path fill="currentColor" d="M4 8L0 4h8z"></path></svg>
                    </div>
                </div>
                <div class="u-align-left u-form-group u-form-submit">
                    <a href="#" id="submit" class="u-active-grey-90 u-border-4 u-border-active-grey-90 u-border-grey-75 u-border-hover-grey-90 u-btn u-btn-round u-btn-submit u-button-style u-grey-75 u-hover-grey-90 u-radius-50 u-btn-1">Submit</a>
                </div>
            </form>
            <input id="postcode" hidden />
        </div>
        <h4 id="result" class="u-text u-text-default u-text-1">
        </h4>
    </div>
</section>
<section class="u-clearfix u-grey-light-2 u-typography-custom-page-typography-12--Map u-section-2" id="sec-9204">
    <div class="u-absolute-hcenter u-expanded u-grey-light-2 u-map">
        <div class="embed-responsive">
            <div id="map" class="embed-responsive-item"></div>
        </div>
    </div>
</section>



@section Styles {
    <link rel="stylesheet" href="~/Content/nicepage.css" media="screen">
    <link rel="stylesheet" href="~/Content/Map.css" media="screen">
    <link href="~/Content/bootstrap.min.css" rel="stylesheet" />
    <link href='https://api.mapbox.com/mapbox-gl-js/v2.3.1/mapbox-gl.css' rel='stylesheet' />
    <link href="~/Content/Spiderfying.css" rel="stylesheet" />
    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.css">
    <style type="text/css">

        .spider-leg-container .spider-leg-pin {
            position: relative;
            width: 22px;
            height: 22px;
            margin-left: -8px;
            margin-top: -18px;
            background-image: url(https://blackspothelper.tk/images/sprite.png);
            background-position: -110px -110px;
        }

        .spider-leg-container .spider-leg-line {
            background-color: #e60e0e;
        }

        .spider-leg-container:hover .spider-leg-line {
            background-color: #e60e0e;
        }
    </style>
}
@section Scripts {
    <script class="u-script" src="~/Scripts/jquery.js"></script>
    <script class="u-script" src="~/Scripts/nicepage.js"></script>
    <script src="~/Scripts/bootstrap.min.js"></script>
    <script src='https://api.mapbox.com/mapbox-gl-js/v2.3.1/mapbox-gl.js'></script>
    <script src="~/Scripts/jquery.signalR-2.4.2.min.js"></script>
    <script src="~/signalr/hubs"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.2/lodash.js"></script>
    <script src="~/Scripts/Spiderfying.js"></script>
    <script>
        mapboxgl.accessToken = 'pk.eyJ1IjoibG9oc2UiLCJhIjoiY2tnbmVtdGM4MDlkdjMxcWg4ODg0MjY0dCJ9.WiZuARwnopVEj478S6oaXg';
        var map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/light-v10',
            minZoom: 7,
            maxZoom: 14,
            center: [144.946457, -37.840935]
        });
        map.on('load', () => {
            spiderifier = new MapboxglSpiderifier(map, {
                customPin: true
            });
            SPIDERFY_FROM_ZOOM = 13;
            var url = "https://opendata.arcgis.com/datasets/74dd92127eea4404b0dad1d7e39bf0e3_1.geojson";
            var request = new XMLHttpRequest();
            request.open("get", url);
            request.send(null);
            var newGeoJSON = null;
            $('#result').text("Crash data loading......");
            request.onload = function () {
                if (request.status == 200) {
                    var json = JSON.parse(request.responseText);
                    console.log("Crash data loaded");
                    newGeoJSON = {
                        type: "FeatureCollection",
                        name: "Road_Crashes_for_five_Years_-_Victoria",
                        features: []
                    };
                    newGeoJSON.features = json.features.filter(feature => feature.properties.ROAD_GEOMETRY === "Cross intersection");
                    map.getSource('crash').setData(newGeoJSON);
                    $('#result').text("Crash data loaded");

                }
            };
            map.addSource('crash', {
                type: 'geojson',
                data: null,
                cluster: true,
                clusterMaxZoom: 14,
                clusterRadius: 50
            });

            //const pubTypes = geojson.features.map(feature => feature.properties.PubType);
            //const uniquePubTypes = Array.from(new Set(pubTypes));
            //const filterElem = document.getElementById('pubTypeFilter');
            //uniquePubTypes.forEach(pubType => {
            //    const opt = document.createElement('option');
            //    opt.value = pubType;
            //    opt.innerText = pubType;
            //    filterElem.appendChild(opt);
            //});
            map.addLayer({
                id: 'clusters',
                type: 'circle',
                source: 'crash',
                filter: ['has', 'point_count'],
                paint: {
                    'circle-color': [
                        'step',
                        ['get', 'point_count'],
                        '#51bbd6',
                        100,
                        '#f1f075',
                        750,
                        '#f28cb1'
                    ],
                    'circle-radius': [
                        'step',
                        ['get', 'point_count'],
                        20,
                        100,
                        30,
                        750,
                        40
                    ]
                }
            });

            map.addLayer({
                id: 'cluster-count',
                type: 'symbol',
                source: 'crash',
                filter: ['has', 'point_count'],
                layout: {
                    'text-field': '{point_count_abbreviated}',
                    'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
                    'text-size': 12
                }
            });


            map.on('zoomstart', function () {
                spiderifier.unspiderfy();
            });
            map.on('click', (e) => {
                var features = map.queryRenderedFeatures(e.point, {
                    layers: ['clusters']
                });
                spiderifier.unspiderfy();
                if (!features.length) {
                    return;
                } else if (map.getZoom() < SPIDERFY_FROM_ZOOM) {
                    map.easeTo({ center: e.lngLat, zoom: map.getZoom() + 2 });
                } else {
                    map.getSource('crash').getClusterLeaves(
                        features[0].properties.cluster_id,
                        300,
                        0,
                        function (error, leafFeatures) {
                            if (error) {
                                return console.error('cluster error', error);
                            }
                            var markers = _.map(leafFeatures, function (leafFeature) {
                                return leafFeature.properties;
                            });
                            spiderifier.spiderfy(features[0].geometry.coordinates, markers);
                        }
                    );
                }
            });


            map.on('mouseenter', 'clusters', () => {
                map.getCanvas().style.cursor = 'pointer';
            });
            map.on('mouseleave', 'clusters', () => {
                map.getCanvas().style.cursor = '';
            });
            map.on('mousemove', function (e) {
                var features = map.queryRenderedFeatures(e.point, {
                    layers: ['clusters']
                });
                map.getCanvas().style.cursor = (features.length) ? 'pointer' : '';
            });
            map.addSource('poly', {
                'type': 'geojson',
                'data': null
            });
            map.addLayer({
                'id': 'poly',
                'type': 'fill',
                'source': 'poly',
                'layout': {},
                'paint': {
                    'fill-color': '#0080ff',
                    'fill-opacity': 0.3
                }
            });
            map.addLayer({
                'id': 'outline',
                'type': 'line',
                'source': 'poly',
                'layout': {},
                'paint': {
                    'line-color': '#000',
                    'line-width': 3
                }
            });
            $(function () {
                var postCodeQuery = $.connection.postCodeQuery;
                postCodeQuery.client.displayResult = function (postcode, locationArray, isFound) {
                    if (isFound == "true") {
                        document.getElementById('postcode').value = postcode
                        document.getElementById('result').innerHTML = "Select a suburb to spot the area<br />" + locationArray;
                        var selectlist = document.getElementById('locs');
                        selectlist.innerHTML = "";
                        var selectcontainer = document.getElementById('select');
                        selectcontainer.classList.remove("u-form-control-hidden");
                        var locs = eval(locationArray);
                        var holder = document.createElement("option");
                        holder.value = "--";
                        holder.innerHTML = "Choose Your Suburb";
                        selectlist.appendChild(holder);
                        locs.forEach(function (loc) {
                            var option = document.createElement("option");
                            option.value = loc;
                            option.innerHTML = loc;
                            selectlist.appendChild(option);
                        })


                    }
                    if (isFound == "false") {
                        if (postcode == 'ABC') {
                            $('#result').text("database loading");
                        }
                        else {
                            $('#result').text("Cannot find this area, try other postcodes!");
                        }

                        var selectlist = document.getElementById('locs');
                        selectlist.innerHTML = "";
                        var selectcontainer = document.getElementById('select');
                        selectcontainer.classList.add("u-form-control-hidden");
                        map.getSource('poly').setData(null);

                    }
                };
                postCodeQuery.client.displaypolygon = function (geometry, center) {
                    var poly = JSON.parse(geometry);
                    map.getSource('poly').setData(poly);
                    map.setCenter(eval(center));
                    $('#result').text("Loaded successfully!");
                    map.flyTo({
                        center: eval(center), zoom: 14, speed: 0.25,
                        curve: 2,
                        easing(t) {
                            return t;
                        }
                    });
                };
                postCodeQuery.client.display = function (message) {
                    $('#result').text(message);
                };
                $.connection.hub.start().done(function () {
                    $('#submit').click(function () {
                        map.getSource('poly').setData(null);
                        var postcode = $('#number').val();
                        if (postcode.length != 4) {
                            $('#result').text("Invalid, should be 4-digits");
                        }
                        else {
                            postCodeQuery.server.send(postcode);
                            $('#result').text("Loading......");
                        }
                    });
                });
                $('#locs').change(function () {
                    if ($(this).val() != '--') {
                        map.getSource('poly').setData(null);
                        $('#result').text("Loading......");
                        postCodeQuery.server.getpoly($('#postcode').val(), $(this).val());
                    }

                });
            });
        });

    </script>
}